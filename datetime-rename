#!/usr/bin/env python

import argparse
from datetime import datetime
import logging
import os


def rename(config):
    logging.info('Parsing input files with datetime format "%s"',
                 config.datetime_format_in)
    logging.info('Writing output files with datetime format "%s"',
                 config.datetime_format_out)
    for file_path in config.files:
        if not os.path.isfile(file_path):
            logging.warning('%s is not a file. Skipping ...', file_path)
            continue
        folder, file_name = os.path.split(file_path)
        file_base_name, file_ext = os.path.splitext(file_name)

        # Extract datetime format
        try:
            file_date_time = datetime.strptime(file_base_name, config.datetime_format_in)
        except ValueError as err:
            logging.warning('Could not automatically parse datetime from '
                            '"%s": %s', file_base_name, err.message)
            continue

        # Form new file name
        new_file_base_name = datetime.strftime(file_date_time, config.datetime_format_out)
        new_file_name = new_file_base_name + file_ext
        new_file_path = os.path.join(folder, new_file_name)

        # Rename the file
        logging.info('Renaming %s to %s', file_name, new_file_name)
        if not config.dry:
            os.rename(file_path, new_file_path)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    parser = argparse.ArgumentParser(
        description='Renames files with date patterns. The patterns are '
                    'defined according to the convention described here: '
                    'https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior')
    parser.add_argument('files', type=str, nargs='+', help='All files to be renamed.')
    parser.add_argument(
        '--datetime_format_in',
        default='%Y%m%d_%H%M%S',
        type=str,
        help='Datetime pattern of the input files.')
    parser.add_argument(
        '--datetime_format_out',
        default='%Y-%m-%d_%H%M%S',
        type=str,
        help='Datetime pattern of the output files.')
    parser.add_argument(
        '--dry',
        default=False,
        type=bool,
        help='If set, do not rename any files.'
    )
    arguments = parser.parse_args()
    rename(config=arguments)
